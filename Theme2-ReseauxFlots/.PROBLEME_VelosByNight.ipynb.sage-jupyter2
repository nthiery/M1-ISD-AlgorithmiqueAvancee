{"exec_count":1,"start":1520852554264,"input":"import json\ndata = json.load(open(\"media/velib-emplacement-des-stations.json\"))","state":"done","pos":2,"cell_type":"code","type":"cell","end":1520852554269,"id":"1b8318","kernel":"anaconda3"}
{"type":"cell","id":"088349","pos":20,"input":"","cell_type":"code","exec_count":18}
{"type":"cell","id":"1790cf","pos":22,"input":"","cell_type":"code","exec_count":20}
{"type":"cell","id":"17f5e6","pos":16,"input":"","cell_type":"code","exec_count":9}
{"type":"cell","id":"1adea1","pos":28,"input":"# par exemple...\nremplissage(F, \"Hauteville - Bonne Nouvelle\") # pour mes calculs 13","cell_type":"code","exec_count":35}
{"type":"cell","id":"3084e2","pos":27,"input":"def remplissage(flot, station):\n    \"\"\"\n    Renvoie le nombre de vélos qu'on aura installé à `station` à la fin de la nuit.\n    \n    INPUT :\n    \n        - flot, l'objet contenant le résultat de vos calculs\n        - station, le nom d'une station velib\n    \"\"\"\n    # à compléter\n","cell_type":"code","exec_count":27}
{"type":"cell","id":"3bd6d8","pos":25,"input":"# vérifons qu'on ne dépasse pas la capacité des navettes\nassert all( navette(F, d1[\"fields\"][\"name\"], d2[\"fields\"][\"name\"]) <= 50 for d1 in data for d2 in data)","cell_type":"code","exec_count":24}
{"type":"cell","id":"420d0f","pos":23,"input":"def navette(flot, station1, station2):\n    \"\"\"\n    S'il existe une navette entre `station1` et `station2`, renvoie le nombre de vélos qui seront transportés par cette navette durant la nuit. Sinon, renvoie 0.\n    \n    INPUT:\n    \n        - flot, l'objet contenant le résultat de vos calculs\n        - station1, le nom d'une station Velib\n        - station2, le nom d'une seconde station Vélib\n    \"\"\"\n    # à compléter\n","cell_type":"code","exec_count":21}
{"type":"cell","id":"476125","pos":34,"input":"","cell_type":"code","exec_count":34}
{"type":"cell","id":"50c5cc","pos":19,"input":"","cell_type":"code","exec_count":17}
{"type":"cell","id":"55d606","pos":15,"input":"## A vous de jouer !\n\nVous avez maintenant tous les éléments pour résoudre le problème. Petit résumé.\n\n**Le but** : acheminer le maximum de vélos sur les 1300.\n\n**Les contraintes** :\n\n * respecter la capacité de chaque station (pas plus de 80% de remplissage)\n * respecter les contraintes de l'énoncé sur les camions de départ et les navettes.\n \n**Le résultat** : votre résultat doit être facilement utilisable. En particulier vous devez implanter les foncion `navette` et `remplissage` définie en bas de la fiche et donner les lignes de codes affichant les réponses aux questions. \n\n**Un peu de dessin ?** Donnez une illustration de votre résultat en utilisant matplotlib.\n\n**Comment faire ?** Aidez-vous des fiches intermédiaires proposées, discutez avec votre groupe, posez des questions, lisez wikiedia.","cell_type":"markdown"}
{"type":"cell","id":"572395","pos":31,"input":"**Combien de vélos avez-vous livré ?**\n\nRépondez par une ligne de code qui affiche la réponse en se basant sur vos calculs.","cell_type":"markdown"}
{"type":"cell","id":"647128","pos":35,"input":"## Un peu de dessin ?\n\nOn voudrait se faire une idée du réseau de navette, pouvez-vous le représenter graphiquement ?","cell_type":"markdown"}
{"type":"cell","id":"6b68ab","pos":10,"input":"Par exemple, la distance entre la première station de la liste *Chernoviz - Raynouard* et la seconde, *Choron - Martyrs* est légèrement inférieure à 5km.","cell_type":"markdown"}
{"type":"cell","id":"6df62a","pos":0,"input":"# Le problème à résoudre\n\nVous avez été embauché comme consultant chez *Schmurfvengo* qui vient d'obtenir de façon inespérée la gestion des vélibs à Paris. Le problème est le suivant : pour cause de soucis techniques, il faut régulièrement remplacer l'ensemble de la flotte (1300 vélos) en **une nuit**. \n\nPour cela, vous disposez de 4 gros camions qui ont chacun la possibilité de livrer 500 vélos au cours de la nuit. Cependant, pour éviter de polluer la capitale, ces camions se contentent de livrer chacun dans une station (la plus proche de l'entrepot correspondant). Les sations correspondant aux 4 camions sont :\n\n * Pierre Ginier Clichy\n * Le Vau - Maurice Bertaux\n * Le Brix et Mesmin-Jourdan\n * Siam - La Pompe\n \nIl y a 68 stations en fonctionnement dans la capitale. Il faut donc acheminer les vélos aux autres stations. Pour cela on dispose de navettes électriques pouvant se déplacer entre les stations de vélos, sur de courtes distances. Une navette peut livrer 50 vélos au cours de la nuit. On veut livrer des vélos dans toutes les stations sans dépasser 80% de leur capacité (pour laisser quelques places vides).  Votre travail est d'effectuer une étude rapide préalable pour estimer une solution possible d'acheminement de l'ensemble des vélos (combien de navettes placer, où, etc). On considèrera que deux stations peuvent être réliées par une navette si elles sont distantes au maximum de 2500 mètres à vol d'oiseau.\n\nExemple : la station \"Institut de France\" a une capacité de 17 vélos, on veut lui donc lui en livrer 13 : on pourra emprunter la navette qui va de \"Pierre Ginier Clichy\" à \"Hauteville - Bonne Nouvelle\" puis une seconde navette de \"Hauteville - Bonne Nouvelle\" à \"Institut de France\". (Remarque, les 13 vélos peuvent aussi venir de plusieurs navettes différentes arrivant à \"Institut de France\")","cell_type":"markdown"}
{"type":"cell","id":"762cbe","pos":4,"input":"len(data)","cell_type":"code","exec_count":2}
{"type":"cell","id":"78f1ac","pos":9,"input":"import math\ndef toRad(angle):\n    \"\"\"\n    Converti un angle donné en degré en un angle donné en radian.\n    \n    INPUT:\n        \n        - angle, un angle en degré\n        \n    OUTPUT : la valeur en radian\n    \"\"\"\n    return angle*2*math.pi/360\n\ndef distance(p1, p2):\n    \"\"\"\n    Renvoie la distance en mètres entre les points `p1` et `p2` données en coordonnées géographique\n    \n    INPUT:\n    \n        - p1, un tuple (latitude, longitude)\n        - p2, un tuple (latitude, longitude)\n        \n    OUPUT : la distance à vol d'oiseau en mètres entre p1 et p2\n    \"\"\"\n    lat1, lon1 = p1\n    lat2, lon2 = p2\n    R = 6371e3\n    phi1 = toRad(lat1)\n    phi2 = toRad(lat2)\n    dphi = toRad(lat2 - lat1)\n    dlam = toRad(lon2 - lon1)\n\n    a = math.sin(dphi/2)**2 + math.cos(phi1)*math.cos(phi2)*math.sin(dlam/2)**2\n    c = 2*math.atan2(math.sqrt(a), math.sqrt(1-a))\n    return R*c","cell_type":"code","exec_count":5}
{"type":"cell","id":"860190","pos":30,"input":"# vérifons qu'on ne distribue pas des \"demi-vélos\"\nassert all( remplissage(F, d[\"fields\"][\"name\"]) == int(remplissage(F, d[\"fields\"][\"name\"])) for d in data)","cell_type":"code","exec_count":30}
{"type":"cell","id":"8e12dd","pos":12,"input":"On vous mondre aussi les scripts suivants qui permettent de faire un affichage graphique avec *mathplotlib*. (Le premier affiche des points et le second des lignes)","cell_type":"markdown"}
{"type":"cell","id":"9239e7","pos":32,"input":"","cell_type":"code","exec_count":31}
{"type":"cell","id":"93102c","pos":5,"input":"Voilà par exemple, le premier élément de la liste, la station *Chernoviz - Raynouard*","cell_type":"markdown"}
{"type":"cell","id":"9cbde2","pos":11,"input":"distance((data[0][\"fields\"][\"lat\"], data[0][\"fields\"][\"lon\"]), (data[1][\"fields\"][\"lat\"], data[1][\"fields\"][\"lon\"])) ","cell_type":"code","exec_count":6}
{"type":"cell","id":"9e827f","pos":6,"input":"data[0]","cell_type":"code","exec_count":3}
{"type":"cell","id":"a1c7aa","pos":14,"input":"import matplotlib.pyplot as plt\n\n\nstation_names = set(d['fields']['name'] for d in data)\nstation_dict = {d['fields']['name']:d for d in data}\nstation = station_names.pop()\n\nwhile len(station_names) > 0:\n    next_station = min(station_names, key = lambda n: distance((station_dict[station][\"fields\"][\"lat\"], station_dict[station][\"fields\"][\"lon\"]), (station_dict[n][\"fields\"][\"lat\"], station_dict[n][\"fields\"][\"lon\"])))\n    station_names.remove(next_station)\n    plt.plot([station_dict[station][\"fields\"][\"lon\"], station_dict[next_station][\"fields\"][\"lon\"]], [station_dict[station][\"fields\"][\"lat\"], station_dict[next_station][\"fields\"][\"lat\"]], 'k-', lw=1)\n    station = next_station\n\nplt.title('Un chemin reliant toutes les stations')\nplt.xlabel('longitude')\nplt.ylabel('latitude')\nplt.savefig('CheminsStations.png')\nplt.show()","cell_type":"code","exec_count":8}
{"type":"cell","id":"a91c28","pos":29,"input":"# vérifons qu'on ne dépasse pas la capacité des stations\nassert all( remplissage(F, d[\"fields\"][\"name\"]) <= 0.8 * d[\"fields\"][\"capacity\"] for d in data)","cell_type":"code","exec_count":29}
{"type":"cell","id":"aa0327","pos":37,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"ac806e","pos":26,"input":"# vérifons qu'on n'a pas de navettes entre une station et elle-même\nassert all( navette(F, d[\"fields\"][\"name\"], d[\"fields\"][\"name\"]) == 0 for d in data)","cell_type":"code","exec_count":26}
{"type":"cell","id":"aedcb8","pos":1,"input":"## Les données\n\nPour résoudre ce problème, vous pouvez utiliser les données de [Open Data Paris](https://opendata.paris.fr). La table dont vous avez besoin est [Stations Velibs : emplacement des stations](https://opendata.paris.fr/explore/dataset/velib-emplacement-des-stations/). Le fichier *json* est disponible dans ce dossier, les données sont directement interprétables en python de cette façon.","cell_type":"markdown"}
{"type":"cell","id":"b40d5f","pos":24,"input":"# par exemple...\nnavette(F, \"Pierre Ginier Clichy\", \"Hauteville - Bonne Nouvelle\") # pour mes calculs 50 vélos","cell_type":"code","exec_count":23}
{"type":"cell","id":"b8b633","pos":13,"input":"import matplotlib.pyplot as plt\n\nx = [d[\"fields\"][\"lon\"] for d in data]\ny = [d[\"fields\"][\"lat\"] for d in data]\n\n\nplt.scatter(x,y,s=5)\n\nplt.title('Les stations velibs dans Paris')\nplt.xlabel('longitude')\nplt.ylabel('latitude')\nplt.savefig('StationsVelib.png')\nplt.show()","cell_type":"code","exec_count":7}
{"type":"cell","id":"c6662c","pos":7,"input":"data[0][\"fields\"][\"capacity\"]","cell_type":"code","exec_count":4}
{"type":"cell","id":"d55268","pos":33,"input":"**Combien de navettes avez-vous utilisé ?**","cell_type":"markdown"}
{"type":"cell","id":"d5fc57","pos":17,"input":"","cell_type":"code","exec_count":10}
{"type":"cell","id":"e1a164","pos":3,"input":"La variable `data` est une liste dont chaque élément est un dictionnaire python contenant les informations d'une station vélib.","cell_type":"markdown"}
{"type":"cell","id":"e8931a","pos":36,"input":"","cell_type":"code","exec_count":39}
{"type":"cell","id":"ef9844","pos":8,"input":"On vous fourni la fonction suivante, qui permet de calculer la distance en mètres entre deux points données sous forme `(latitude, longitude)`.","cell_type":"markdown"}
{"type":"cell","id":"f4757c","pos":18,"input":"","cell_type":"code","exec_count":11}
{"type":"cell","id":"f8107f","pos":21,"input":"# F = ???\n","cell_type":"code","exec_count":19}
{"type":"file","last_load":1520852548345}
{"type":"settings","kernel":"anaconda3","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.4"}},"kernel_state":"idle","kernel_usage":{"cpu":0,"memory":86568960},"trust":true}